{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react'; // react router dom\n\nimport { useLocation } from 'react-router-dom'; // overlay scrollbars\n\nimport 'overlayscrollbars/css/OverlayScrollbars.css';\nimport OverlayScrollbars from 'overlayscrollbars';\n\nconst CustomScrollbar = () => {\n  _s();\n\n  const {\n    pathname\n  } = useLocation();\n  const scrollbar = OverlayScrollbars(document.body, {\n    overflowBehavior: {\n      x: \"hidden\",\n      y: \"scroll\"\n    },\n    callbacks: {\n      onScroll: () => {\n        const scroll_position = scrollbar.scroll().position.y;\n        const navigation = document.querySelector('.navigation');\n        if (typeof navigation === 'undefined' || navigation === null) return;\n\n        if (window.innerHeight > 991 && scroll_position > 53) {\n          navigation.classList.add('scrolled');\n        } else if (window.innerHeight < 991 && scroll_position > 30) {\n          navigation.classList.add('scrolled');\n        } else {\n          navigation.classList.remove('scrolled');\n        }\n      }\n    }\n  }); // scroll to top on route change\n\n  useEffect(() => {\n    scrollbar.scroll(0);\n  }, [pathname, scrollbar]);\n  useEffect(() => {\n    scrollbar.update();\n  }, [scrollbar]);\n  return null;\n};\n\n_s(CustomScrollbar, \"TZqNTb/hfjR3j9lXhvME1LJIpv0=\", false, function () {\n  return [useLocation];\n});\n\n_c = CustomScrollbar;\nexport default CustomScrollbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomScrollbar\");","map":{"version":3,"sources":["/home/rudra/Documents/satgur/Satgur-React/src/markup/components/CustomScrollbar.js"],"names":["useEffect","useLocation","OverlayScrollbars","CustomScrollbar","pathname","scrollbar","document","body","overflowBehavior","x","y","callbacks","onScroll","scroll_position","scroll","position","navigation","querySelector","window","innerHeight","classList","add","remove","update"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B,C,CAEA;;AACA,SAASC,WAAT,QAA6B,kBAA7B,C,CAEA;;AACA,OAAO,6CAAP;AACA,OAAOC,iBAAP,MAA8B,mBAA9B;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAE1B,QAAM;AAAEC,IAAAA;AAAF,MAAeH,WAAW,EAAhC;AAEA,QAAMI,SAAS,GAAGH,iBAAiB,CAACI,QAAQ,CAACC,IAAV,EAAgB;AAC/CC,IAAAA,gBAAgB,EAAG;AACfC,MAAAA,CAAC,EAAG,QADW;AAEfC,MAAAA,CAAC,EAAG;AAFW,KAD4B;AAK/CC,IAAAA,SAAS,EAAE;AACPC,MAAAA,QAAQ,EAAE,MAAM;AACZ,cAAMC,eAAe,GAAGR,SAAS,CAACS,MAAV,GAAmBC,QAAnB,CAA4BL,CAApD;AACA,cAAMM,UAAU,GAAGV,QAAQ,CAACW,aAAT,CAAuB,aAAvB,CAAnB;AAEA,YAAI,OAAOD,UAAP,KAAuB,WAAvB,IAAsCA,UAAU,KAAK,IAAzD,EAA+D;;AAE/D,YAAIE,MAAM,CAACC,WAAP,GAAqB,GAArB,IAA4BN,eAAe,GAAG,EAAlD,EAAuD;AACnDG,UAAAA,UAAU,CAACI,SAAX,CAAqBC,GAArB,CAAyB,UAAzB;AACH,SAFD,MAEO,IAAIH,MAAM,CAACC,WAAP,GAAqB,GAArB,IAA4BN,eAAe,GAAG,EAAlD,EAAuD;AAC1DG,UAAAA,UAAU,CAACI,SAAX,CAAqBC,GAArB,CAAyB,UAAzB;AACH,SAFM,MAGF;AACDL,UAAAA,UAAU,CAACI,SAAX,CAAqBE,MAArB,CAA4B,UAA5B;AACH;AACJ;AAfM;AALoC,GAAhB,CAAnC,CAJ0B,CA4B1B;;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,SAAS,CAACS,MAAV,CAAiB,CAAjB;AACH,GAFQ,EAEN,CAACV,QAAD,EAAWC,SAAX,CAFM,CAAT;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,SAAS,CAACkB,MAAV;AACH,GAFQ,EAEN,CAAClB,SAAD,CAFM,CAAT;AAIA,SAAO,IAAP;AACH,CAtCD;;GAAMF,e;UAEmBF,W;;;KAFnBE,e;AAwCN,eAAeA,eAAf","sourcesContent":["import { useEffect } from 'react';\r\n\r\n// react router dom\r\nimport { useLocation } from  'react-router-dom';\r\n\r\n// overlay scrollbars\r\nimport 'overlayscrollbars/css/OverlayScrollbars.css';\r\nimport OverlayScrollbars from 'overlayscrollbars';\r\n\r\nconst CustomScrollbar = () => {\r\n\r\n    const { pathname } = useLocation();\r\n\r\n    const scrollbar = OverlayScrollbars(document.body, {\r\n        overflowBehavior : {\r\n            x : \"hidden\",\r\n            y : \"scroll\"\r\n        },\r\n        callbacks: {\r\n            onScroll: () => {\r\n                const scroll_position = scrollbar.scroll().position.y;\r\n                const navigation = document.querySelector('.navigation');\r\n        \r\n                if (typeof(navigation) === 'undefined' || navigation === null) return;\r\n        \r\n                if (window.innerHeight > 991 && scroll_position > 53)  {\r\n                    navigation.classList.add('scrolled');\r\n                } else if (window.innerHeight < 991 && scroll_position > 30)  {\r\n                    navigation.classList.add('scrolled');\r\n                }\r\n                else {\r\n                    navigation.classList.remove('scrolled');\r\n                }\r\n            }\r\n        }\r\n    });\r\n  \r\n    // scroll to top on route change\r\n    useEffect(() => {\r\n        scrollbar.scroll(0);\r\n    }, [pathname, scrollbar]);\r\n\r\n    useEffect(() => {\r\n        scrollbar.update();\r\n    }, [scrollbar]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default CustomScrollbar;\r\n"]},"metadata":{},"sourceType":"module"}